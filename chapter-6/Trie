import math


class MyTrie:


    

   
    '''
    Function to construct Trie from given pattern 
    Example Input: ATAGA ATC GAT
    Example Output:
    0 1 A
    1 2 T
    2 3 A
    3 4 G
    4 5 A
    2 6 C
    0 7 G
    7 8 A
    8 9 T
    '''

    def __init__ (self):
        patterns = "ATAGA ATC GAT"
        trie = self.trieConstruction (patterns)
        self.visualizeTrie(trie)

    

    def trieConstruction (self, patterns):
        trie = []
        root_node = dict()
        root_node['char'] = 'root'
        root_node['children'] = []

        trie.append(root_node)

        
        patterns = patterns.split()

        for polynucleotide in patterns:
            current_node = root_node
            for nucleotide_index in range(len(polynucleotide)):
                next_node = True
                if len(current_node['children']) > 0:
                    for child in current_node['children']:
                        if trie[child]['char'] == polynucleotide[nucleotide_index]:
                            current_node = trie[child]
                            next_node = False
                            break
                if next_node:
                    current_node['children'].append(len(trie))
                    next_node = dict()
                    next_node['char'] = polynucleotide[nucleotide_index]
                    next_node['children'] = []
                    current_node = next_node
                    trie.append(current_node)

        return trie
        


        
    '''Allows for visualization of trie post-construction'''
    def visualizeTrie (self, trie):

        def traverseTrie (node):
            for child in trie[node]['children']:
                print(str(node) + " " + str(child) + " " + str(trie[child]['char']))
                if trie[node]['children']:
                    traverseTrie (child)
        print(trie)
        for children in trie[0]['children']:
            print(str(0) + " " + str(children) + " " + str(trie[children]['char']))
            traverseTrie(children)


if __name__ == "__main__":
    MyTrie()
